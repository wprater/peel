//------------------------------------
//    $MIXINS
//------------------------------------
//
// Create a fully formed type style (sizing and vertical rhythm) by passing in a
// single value, e.g.:
//
//font-size(16px)
  
//base-font-size = 16
//base-line-height = 24

font-size($fontValue = base-font-size, $baseFontValue = base-font-size, $baseLineValue = base-line-height)
  font-size   $fontValue px
  font-size   ($fontValue / $baseFontValue) rem
  line-height ($fontValue / $baseFontValue) * $baseLineValue px
  line-height ($baseLineValue/$baseFontValue) * ($fontValue / $baseFontValue) rem
    



//
// Style any number of headings in one fell swoop, e.g.:
//
//.foo{
//   headings(1, 3)
//       color:#BADA55
//   
//}
// This is not yet supported by Stylus, see https://github.com/LearnBoost/stylus/issues/608 for more information.


/*headings(1..6)
    for heading in headings()
        h{{heading}}
            @content
*/          

//
//Create vendor-prefixed CSS in one go, e.g.
//
//@include vendor(border-radius, 4px)
//
//

vendor()
    -webkit- arguments
    -moz-    arguments
    -ms-     arguments
    -o-      arguments


//
// Force overly long spans of text to truncate, e.g.:
//
// `@include truncate(100%)`
//
// Where `$truncation-boundary` is a united measurement.
///
@mixin truncate($truncation-boundary){
    max-width:$truncation-boundary
    white-space:nowrap
    overflow:hidden
    text-overflow:ellipsis
}

//
// Media query mixin.
//
// It’s not great practice to define solid breakpoints up-front, preferring to
// modify your design when it needs it, rather than assuming you’ll want a
// change at ‘mobile’. However, as inuit.css is required to take a hands off
// approach to design decisions, this is the closest we can get to baked-in
// responsiveness. It’s flexible enough to allow you to set your own breakpoints
// but solid enough to be frameworkified.
//
// We define some broad breakpoints in our vars file that are picked up here
// for use in a simple media query mixin. Our options are:
//
// palm
// lap
// lap-and-up
// portable
// desk
// desk-wide
//
// Not using a media query will, naturally, serve styles to all devices.
//
// `@include media-query(palm){ [styles here] }`
//
// We work out your end points for you:
///
$palm-end
    $lap-start - 1px
$lap-end
    $desk-start - 1px

@mixin media-query($media-query)
    @if $media-query
        palm
            @media only screen and (max-width:$palm-end) { @content }
    @if $media-query
        lap
            @media only screen and (min-width:$lap-start) and (max-width:$lap-end) { @content }
    @if $media-query
        lap-and-up
            @media only screen and (min-width:$lap-start) { @content }
    @if $media-query
        portable
            @media only screen and (max-width:$lap-end) { @content }
    @if $media-query
        desk
            @media only screen and (min-width:$desk-start) { @content }
    @if $media-query
        desk-wide
            @media only screen and (min-width: $desk-wide-start) { @content }